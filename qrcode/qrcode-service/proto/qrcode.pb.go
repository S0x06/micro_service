// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qrcode.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QrCodeRequest struct {
	Height               int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Width                int64    `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QrCodeRequest) Reset()         { *m = QrCodeRequest{} }
func (m *QrCodeRequest) String() string { return proto.CompactTextString(m) }
func (*QrCodeRequest) ProtoMessage()    {}
func (*QrCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_qrcode_bc79b48475dcc608, []int{0}
}
func (m *QrCodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QrCodeRequest.Unmarshal(m, b)
}
func (m *QrCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QrCodeRequest.Marshal(b, m, deterministic)
}
func (dst *QrCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrCodeRequest.Merge(dst, src)
}
func (m *QrCodeRequest) XXX_Size() int {
	return xxx_messageInfo_QrCodeRequest.Size(m)
}
func (m *QrCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QrCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QrCodeRequest proto.InternalMessageInfo

func (m *QrCodeRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QrCodeRequest) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

type QrCodeResponse struct {
	Out                  string   `protobuf:"bytes,1,opt,name=Out,proto3" json:"Out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QrCodeResponse) Reset()         { *m = QrCodeResponse{} }
func (m *QrCodeResponse) String() string { return proto.CompactTextString(m) }
func (*QrCodeResponse) ProtoMessage()    {}
func (*QrCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_qrcode_bc79b48475dcc608, []int{1}
}
func (m *QrCodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QrCodeResponse.Unmarshal(m, b)
}
func (m *QrCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QrCodeResponse.Marshal(b, m, deterministic)
}
func (dst *QrCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrCodeResponse.Merge(dst, src)
}
func (m *QrCodeResponse) XXX_Size() int {
	return xxx_messageInfo_QrCodeResponse.Size(m)
}
func (m *QrCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QrCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QrCodeResponse proto.InternalMessageInfo

func (m *QrCodeResponse) GetOut() string {
	if m != nil {
		return m.Out
	}
	return ""
}

func init() {
	proto.RegisterType((*QrCodeRequest)(nil), "proto.QrCodeRequest")
	proto.RegisterType((*QrCodeResponse)(nil), "proto.QrCodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QrCodeClient is the client API for QrCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QrCodeClient interface {
	GetQrCode(ctx context.Context, in *QrCodeRequest, opts ...grpc.CallOption) (*QrCodeResponse, error)
}

type qrCodeClient struct {
	cc *grpc.ClientConn
}

func NewQrCodeClient(cc *grpc.ClientConn) QrCodeClient {
	return &qrCodeClient{cc}
}

func (c *qrCodeClient) GetQrCode(ctx context.Context, in *QrCodeRequest, opts ...grpc.CallOption) (*QrCodeResponse, error) {
	out := new(QrCodeResponse)
	err := c.cc.Invoke(ctx, "/proto.QrCode/GetQrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QrCodeServer is the server API for QrCode service.
type QrCodeServer interface {
	GetQrCode(context.Context, *QrCodeRequest) (*QrCodeResponse, error)
}

func RegisterQrCodeServer(s *grpc.Server, srv QrCodeServer) {
	s.RegisterService(&_QrCode_serviceDesc, srv)
}

func _QrCode_GetQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QrCodeServer).GetQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.QrCode/GetQrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QrCodeServer).GetQrCode(ctx, req.(*QrCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QrCode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.QrCode",
	HandlerType: (*QrCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQrCode",
			Handler:    _QrCode_GetQrCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qrcode.proto",
}

func init() { proto.RegisterFile("qrcode.proto", fileDescriptor_qrcode_bc79b48475dcc608) }

var fileDescriptor_qrcode_bc79b48475dcc608 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2c, 0x4a, 0xce,
	0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xb6, 0x5c, 0xbc,
	0x81, 0x45, 0xce, 0xf9, 0x29, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x62, 0x5c,
	0x6c, 0x19, 0xa9, 0x99, 0xe9, 0x19, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x50, 0x9e,
	0x90, 0x08, 0x17, 0x6b, 0x79, 0x66, 0x4a, 0x49, 0x86, 0x04, 0x13, 0x58, 0x18, 0xc2, 0x51, 0x52,
	0xe2, 0xe2, 0x83, 0x69, 0x2f, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x12, 0xe0, 0x62, 0xf6, 0x2f,
	0x85, 0x68, 0xe6, 0x0c, 0x02, 0x31, 0x8d, 0x5c, 0xb8, 0xd8, 0x20, 0x6a, 0x84, 0xac, 0xb8, 0x38,
	0xdd, 0x53, 0x4b, 0xa0, 0x1c, 0x11, 0x88, 0x43, 0xf4, 0x50, 0xac, 0x97, 0x12, 0x45, 0x13, 0x85,
	0x98, 0xaa, 0xc4, 0x90, 0xc4, 0x06, 0x16, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xcd,
	0x66, 0xc0, 0xc6, 0x00, 0x00, 0x00,
}
